[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "govsecure-ai-platform"
version = "2.0.1"
authors = [
    {name = "Nik Jois", email = "nikjois@llamasearch.ai"},
]
description = "Advanced AI-Powered Government Operations Platform with Latest OpenAI Models"
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Other Audience",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Office/Business",
    "Topic :: System :: Systems Administration",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Web Environment",
    "Framework :: FastAPI",
    "Natural Language :: English",
    "Typing :: Typed",
]
keywords = [
    "government", "ai", "openai", "gpt-4", "compliance", "fedramp", "nist", 
    "security", "automation", "dspy", "reasoning", "audio", "translation",
    "policy", "analysis", "risk", "assessment", "citizen", "services",
    "federal", "public-sector", "artificial-intelligence", "machine-learning"
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "openai>=1.12.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.8",
    "langchain-community>=0.0.20",
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "pandas>=2.1.4",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "jsonschema>=4.20.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "bcrypt>=4.0.1",
    "cryptography>=41.0.7",
    "pyjwt>=2.8.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.9; sys_platform != 'darwin'",
    "psycopg2-binary>=2.9.9; sys_platform == 'darwin' and platform_machine != 'arm64'",
    "redis>=5.0.1",
    "httpx>=0.25.2",
    "requests>=2.31.0",
    "aiofiles>=23.2.1",
    "websockets>=12.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "questionary>=2.0.1",
    "psutil>=5.9.6",
    "py-cpuinfo>=9.0.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "structlog>=23.2.0",
    "sentry-sdk[fastapi]>=1.38.0",
    "pypdf2>=3.0.1",
    "python-docx>=1.1.0",
    "openpyxl>=3.1.2",
    "arrow>=1.3.0",
    "pathlib2>=2.3.7",
    "importlib-metadata>=6.8.0",
    "tenacity>=8.2.3",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "coverage>=7.3.2",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "bandit>=1.7.5",
    "safety>=2.3.5",
    "pre-commit>=3.6.0",
    "bump2version>=1.0.1",
    "tox>=4.0.0",
    "hatch>=1.9.0",
]
audio = [
    "librosa>=0.10.1",
    "soundfile>=0.12.1",
    "SpeechRecognition>=3.10.0",
]
dspy = [
    "dspy-ai>=2.4.0",
]
ai = [
    "sentence-transformers>=2.2.2",
    "faiss-cpu>=1.7.4",
    "chromadb>=0.4.20",
]
docs = [
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]
all = [
    "govsecure-ai-platform[dev,audio,dspy,ai,docs]",
]

[project.scripts]
govsecure = "cli:cli"
govsecure-ai = "cli:cli"

[project.urls]
Homepage = "https://github.com/nikjois/PublicGovPlatform"
Documentation = "https://github.com/nikjois/PublicGovPlatform#readme"
Repository = "https://github.com/nikjois/PublicGovPlatform"
"Bug Tracker" = "https://github.com/nikjois/PublicGovPlatform/issues"
"Changelog" = "https://github.com/nikjois/PublicGovPlatform/blob/main/CHANGELOG.md"
"Discussions" = "https://github.com/nikjois/PublicGovPlatform/discussions"

[tool.hatch.version]
path = "backend/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["backend", "tests"]

[tool.hatch.build.targets.sdist]
include = [
    "/backend",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
    "CONTRIBUTING.md",
    "SECURITY.md",
    "requirements.txt",
    "pyproject.toml",
]

[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-asyncio",
    "pytest-mock",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=backend {args:tests}"
cov-report = "coverage report"
cov-html = "coverage html"

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black",
    "flake8",
    "isort",
    "mypy",
    "bandit",
    "safety",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:backend tests}"
style = [
    "black --check --diff {args:.}",
    "isort --check-only --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "isort {args:.}",
]
security = [
    "bandit -r backend/",
    "safety check",
]
all = [
    "style",
    "typing",
    "security",
]

[tool.hatch.envs.docs]
dependencies = [
    "mkdocs",
    "mkdocs-material",
]

[tool.hatch.envs.docs.scripts]
build = "mkdocs build --clean --strict"
serve = "mkdocs serve --dev-addr localhost:8001"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-fail-under=70",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["backend"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
target-version = ["py39"]
line-length = 100
skip-string-normalization = true

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["backend", "tests"]

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "dspy.*",
    "langchain.*",
    "openai.*",
    "transformers.*",
    "torch.*",
    "librosa.*",
    "soundfile.*",
    "speech_recognition.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312,lint,security,docs
isolated_build = true

[testenv]
deps = 
    pytest
    pytest-cov
    pytest-asyncio
    pytest-mock
commands = pytest {posargs}

[testenv:lint]
deps = 
    black
    flake8
    isort
    mypy
commands = 
    black --check .
    flake8 .
    isort --check-only .
    mypy backend/

[testenv:security]
deps = 
    bandit
    safety
commands = 
    bandit -r backend/
    safety check

[testenv:docs]
deps = 
    mkdocs
    mkdocs-material
commands = mkdocs build
""" 