[tool.poetry]
name = "govsecure-ai"
version = "1.0.0"
description = "2025 Public Sector AI Engineering Platform with FedRAMP High and IL5 compliance"
authors = ["Nik Jois <nikjois@llamasearch.ai>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://github.com/nikjois/PublicGovPlatform"
repository = "https://github.com/nikjois/PublicGovPlatform"
documentation = "https://nikjois.github.io/PublicGovPlatform/"
keywords = ["government", "ai", "compliance", "fedramp", "security"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Government",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Security",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[tool.poetry.dependencies]
python = "^3.10"
# Core Framework
fastapi = "0.104.1"
uvicorn = {extras = ["standard"], version = "0.24.0"}
pydantic = {extras = ["email"], version = "2.4.2"}
pydantic-settings = "2.0.3"

# OpenAI and AI Libraries
openai = "1.3.8"
langchain = "0.0.339"
langchain-openai = "0.0.2"
tiktoken = "0.5.1"
anthropic = "0.7.8"

# Database and ORM
sqlalchemy = "2.0.23"
alembic = "1.12.1"
psycopg2-binary = "2.9.9"
asyncpg = "0.29.0"

# Authentication and Security
python-jose = {extras = ["cryptography"], version = "3.3.0"}
passlib = {extras = ["bcrypt"], version = "1.7.4"}
python-multipart = "0.0.6"
cryptography = "41.0.7"
pyotp = "2.9.0"

# Caching and Session Management
redis = "5.0.1"
aioredis = "2.0.1"

# HTTP and API
httpx = "0.25.1"
requests = "2.31.0"
aiohttp = "3.9.0"

# Data Processing
pandas = "2.1.3"
numpy = "1.25.2"
scipy = "1.11.4"

# CLI and UI
click = "8.1.7"
rich = "13.7.0"
typer = "0.9.0"
inquirer = "3.1.3"

# Configuration and Environment
python-decouple = "3.8"
pyyaml = "6.0.1"
toml = "0.10.2"

# Logging and Monitoring
loguru = "0.7.2"
structlog = "23.2.0"
prometheus-client = "0.19.0"

# OpenTelemetry
opentelemetry-api = "1.21.0"
opentelemetry-sdk = "1.21.0"
opentelemetry-exporter-otlp = "1.21.0"
opentelemetry-instrumentation-fastapi = "0.42b0"
opentelemetry-instrumentation-sqlalchemy = "0.42b0"

# Compliance and Security Scanning
bandit = "1.7.5"
safety = "2.3.5"
semgrep = "1.45.0"

# File Processing
python-magic = "0.4.27"
pillow = "10.1.0"
pypdf2 = "3.0.1"
python-docx = "1.1.0"

# Async and Concurrency
asyncio-mqtt = "0.16.1"
celery = "5.3.4"
redis-py-cluster = "2.1.3"

# Development and Testing
pytest = "7.4.3"
pytest-asyncio = "0.21.1"
pytest-cov = "4.1.0"
pytest-mock = "3.12.0"
pytest-xdist = "3.5.0"

# Code Quality
black = "23.11.0"
isort = "5.12.0"
flake8 = "6.1.0"
mypy = "1.7.1"
pre-commit = "3.5.0"

# Documentation
mkdocs = "1.5.3"
mkdocs-material = "9.4.8"
mkdocs-mermaid2-plugin = "1.1.1"

[tool.poetry.group.dev.dependencies]
# Additional development dependencies
jupyter = "1.0.0"
ipython = "8.17.2"
notebook = "7.0.6"

# Load testing
locust = "2.17.0"

# Docker and deployment
docker = "6.1.3"
kubernetes = "28.1.0"

[tool.poetry.scripts]
govsecure = "cli:cli"
gov-cli = "cli:start"
gov-scan = "cli:scan"
gov-web = "cli:web"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["backend", "frontend", "tests"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "uvicorn.*",
    "redis.*",
    "celery.*",
    "sqlalchemy.*",
    "alembic.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml:coverage.xml",
    "--cov-fail-under=90",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "security: Security tests",
    "compliance: Compliance tests",
    "slow: Slow tests",
    "network: Tests requiring network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/node_modules/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["*_test.py", "test_*.py"] 